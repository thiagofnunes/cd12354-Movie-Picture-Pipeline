name: Backend Continuous Deployment

on:
  workflow_dispatch:

  push:
    branches:
      - main

env:
  IMAGE_NAME: backend
  DEPLOYMENT_NAME: backend
  EKS_CLUSTER_NAME: cluster

jobs:
  lint:
    name: Lint job
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: backend
    steps:
      - name: Get code
        uses: actions/checkout@v3

      - name: Install pipenv
        run: pip install pipenv

      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: ~/.local/share/virtualenvs
          key: deps-python-${{ hashFiles('**/Pipfile.lock') }}

      - name: Install dependencies
        run: pipenv install --dev

      - name: Run lint
        run: pipenv run lint

  test:
    name: Test job
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: backend
    steps:
      - name: Get code
        uses: actions/checkout@v3

      - name: Install pipenv
        run: pip install pipenv

      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: ~/.local/share/virtualenvs
          key: deps-python-${{ hashFiles('**/Pipfile.lock') }}

      - name: Install dependencies
        run: pipenv install --dev

      - name: Run test
        run: pipenv run test

  build:
    name: Build job
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: success()
    defaults:
      run:
        shell: bash
        working-directory: backend
    steps:
      - name: Get code
        uses: actions/checkout@v3

      - name: Build the docker image
        run: |
          docker build \
            -t $IMAGE_NAME:${GITHUB_SHA::7} \
            .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Publish the docker image to ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker tag $IMAGE_NAME:${GITHUB_SHA::7} $REGISTRY/$IMAGE_NAME:release-${GITHUB_SHA::7}
          docker push $REGISTRY/$IMAGE_NAME:release-${GITHUB_SHA::7}

      - name: Kubeconfig Auth
        run: |
          aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region ${{ vars.AWS_REGION }}

      - name: Deploy the Docker image to Amazon EKS
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          cd k8s
          kustomize edit set image backend=$REGISTRY/$IMAGE_NAME:release-${GITHUB_SHA::7}
          kustomize build | kubectl apply -f -
          kubectl rollout status deployment/$DEPLOYMENT_NAME
          kubectl get services -o wide
